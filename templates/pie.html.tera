<!DOCTYPE html>

<head>
  <meta charset="utf-8">
  </meta>
  <title>Firmware memory layout: {{title}}</title>
  <link rel="stylesheet" type="text/css" href="https://fonts.googleapis.com/css?family=Open+Sans:400,600">
  <style>
    body {
      font-family: 'Open Sans', sans-serif;
      font-size: 10px;
      font-weight: 400;
      background-color: #fff;
      width: 960px;
      height: 700px;
      margin-top: 10px;
    }

    #main {
      float: left;
      width: 750px;
    }

    #footer {
      float: left;
      width: 750px;
    }

    #sidebar {
      float: right;
      width: 100px;
    }

    #sequence {
      width: 600px;
      height: 70px;
    }

    #legend {
      padding: 50px 0 0 3px;
    }

    #sequence text,
    #legend text,
    #footer text {
      font-weight: 600;
      fill: #fff;
    }

    #chart {
      position: relative;
    }

    #chart path {
      stroke: #fff;
    }

    #explanation {
      position: absolute;
      top: 360px;
      left: 570px;
      width: 140px;
      text-align: center;
      color: #666;
      z-index: -1;
    }

    #percentage {
      font-size: 2.5em;
    }
    
    #info {
      position: absolute;
      top: 3em;
      left: 3em;
      font-size: 1.5em;
    }
  </style>
</head>

<body>
  <div id="main">
    <div id="info" style="position:absolute; top: 3em; left: 3em"></div>
    <div id="chart">
      <div id="explanation" style="visibility: hidden;">
        <span id="percentage"></span><br />
        bytes in <span id="percentage_desc"></span>
      </div>
    </div>
  </div>
  <div id="sidebar">
    <div id="legend"></div>
    Mouseover or click on the round segment diagram.
  </div>

  <script type="module">
    import * as d3 from "https://cdn.jsdelivr.net/npm/d3@7/+esm";

    const data = { {{ serialized }} };
    const color = d3.scaleOrdinal(d3.quantize(d3.interpolateRainbow, data.children.length + 1));

    // https://d3js.org/d3-hierarchy/hierarchy#hierarchy
    const root = d3.hierarchy(data)
      .sum(d => d.size)
      .sort((a, b) => b.size - a.size);
    root.each(d => d.current = d);
    // https://d3js.org/d3-hierarchy/partition#partition
    var partition = d3.partition()
      .size([2 * Math.PI, root.height + 1])(root);

    // Dimensions of sunburst.
    const width = 1280;
    const height = 800;
    const radius = Math.min(width, height) / 2;
    const inner = radius / 5;
    const r_increment = (radius - inner) / (root.height);

    // Tool func to generate a single Arc
    // https://d3js.org/d3-shape/arc#arcs
    const arc = d3.arc()
      .startAngle(d => d.x0)
      .endAngle(d => d.x1)
      .padAngle(d => 0.001)
      .innerRadius(d => inner + d.y0 * r_increment)
      .outerRadius(d => Math.min(radius, inner + d.y1 * r_increment))

    const svg = d3.select("#chart")
      .append("svg:svg")
      .attr("viewBox", [-width / 2, -height / 2, width, height])
      .style("font", "10px sans-serif")
      .style("height", "100%")
      .style("width", "100%")
      .style("position", "fixed");

    const path = svg.append("g")
      .selectAll("path")
      .data(root.descendants().slice(1))
      .join("path")
      .attr("fill", d => { while (d.depth > 1) d = d.parent; return color(d.data.name); })
      .attr("fill-opacity", d => arcVisible(d.current) ? (d.children ? 0.6 : 0.4) : 1.0)
      .attr("pointer-events", d => arcVisible(d.current) ? "auto" : "none")
      .attr("d", d => arc(d.current))
      .on("mouseenter", (event, d) => {
        var modules = [];
        var impl = null;
        d.ancestors().slice(1).reverse().forEach((d, i) => {
          if (d.data.name.startsWith("_<") && d.data.name.endsWith(">")) {
            impl = d.data.name;
          } else {
            if (impl != null) {
              console.log("something went wrong, trying to fix detected impl in: " + d.ancestors().map((d, i) => d.data.name).join("::"));
              modules.push(impl);
              impl = null;
            }
            modules.push(d.data.name);
          }
        });

        d3.select("#info").selectAll("p").remove();
        const info_p = d3.select("#info").append("p");
        info_p.append("b").text("Module: ");
        info_p.append("span").text(modules.join("::"));
        info_p.append("br");

        if (impl != null) {
          impl = impl.slice(2, impl.length - 1).split(" as ").reverse().join(" for ");
          info_p.append("b").text("Impl: ");
          info_p.append("span").text(impl);
          info_p.append("br");
        }

        var item = d.data.name;
        if (item.startsWith("_<") && item.endsWith(">")) {
          item = "impl " + item.slice(2, item.length - 1).split(" as ").reverse().join(" for ");
        }
        info_p.append("b").text("Item: ");
        info_p.append("span").text(item);
        info_p.append("br");

        info_p.append("b").text("Size: ");
        info_p.append("span").text(d.value + " byte");
        info_p.append("br");
      });

    // Make them clickable if they have children.
    path.filter(d => d.children)
      .style("cursor", "pointer")
      .on("click", clicked);

    // tooltip for arcs
    const format = d3.format(",d");
    path.append("title")
      .text(d => `${d.ancestors().map(d => d.data.name).reverse().join("/")}\n${format(d.value)}`);

    const label = svg.append("g")
      .attr("pointer-events", "none")
      .attr("text-anchor", "middle")
      .style("user-select", "none")
      .selectAll("text")
      .data(root.descendants().slice(1))
      .join("text")
      .attr("dy", "0.35em")
      .attr("fill-opacity", d => +labelVisible(d.current))
      .attr("transform", d => labelTransform(d.current))
      .text(d => d.data.name);

    // a circle over everything to make it easier to detect when the mouse leaves the parent g
    const parent = svg.append("circle")
      .datum(root)
      .attr("r", inner)
      .attr("fill", "none")
      .attr("pointer-events", "all")
      .on("click", clicked);

    // Handle zoom on click.
    function clicked(event, p) {
      parent.datum(p.parent || root);

      root.each(d => d.target = {
        x0: Math.max(0, Math.min(1, (d.x0 - p.x0) / (p.x1 - p.x0))) * 2 * Math.PI,
        x1: Math.max(0, Math.min(1, (d.x1 - p.x0) / (p.x1 - p.x0))) * 2 * Math.PI,
        y0: Math.max(0, d.y0 - p.depth),
        y1: Math.max(0, d.y1 - p.depth)
      });

      const t = svg.transition().duration(750);

      // Transition the data on all arcs, even the ones that arenâ€™t visible,
      // so that if this transition is interrupted, entering arcs will start
      // the next transition from the desired position.
      path.transition(t)
        .tween("data", d => {
          const i = d3.interpolate(d.current, d.target);
          return t => d.current = i(t);
        })
        .filter(function (d) {
          return +this.getAttribute("fill-opacity") || arcVisible(d.target);
        })
        .attr("fill-opacity", d => arcVisible(d.target) ? (d.children ? 0.6 : 0.4) : 0)
        .attr("pointer-events", d => arcVisible(d.target) ? "auto" : "none")

        .attrTween("d", d => () => arc(d.current));

      label.filter(function (d) {
        return +this.getAttribute("fill-opacity") || labelVisible(d.target);
      }).transition(t)
        .attr("fill-opacity", d => +labelVisible(d.target))
        .attrTween("transform", d => () => labelTransform(d.current));
    }

    function arcVisible(d) {
      return d.y1 <= 10 && d.y0 >= 0 && d.x1 > d.x0;
    }

    function labelVisible(d) {
      return d.y1 <= 10 && d.y0 >= 1 && (d.y1 - d.y0) * (d.x1 - d.x0) > 0.03;
    }

    function labelTransform(d) {
      const x = (d.x0 + d.x1) / 2 * 180 / Math.PI;
      const y = inner + (d.y0 + d.y1) / 2 * r_increment
      return `rotate(${x - 90}) translate(${y},0) rotate(${x < 180 ? 0 : 180})`;
    }

  </script>
  <script type="module">
    import * as d3 from "https://cdn.jsdelivr.net/npm/d3@7/+esm";
    // Hack to make this example display correctly in an iframe on bl.ocks.org
    d3.select(self.frameElement).style("height", "700px");
  </script>
</body>

</html>